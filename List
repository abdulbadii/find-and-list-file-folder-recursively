fd(){
(($1))&&{
	f=`file $3`
	e=`echo $f|sed -E 's/[^:]+:\s+\S+\s+(\S+(\s+\S+){2}).+/\1/;s/Intel$/32bit/'`
	if [[ $e =~ ^execu ]];then echo $e
	else echo $f|sed -E 's/[^:]+: *(.+)/\1/';fi
}
(($2))&&ldd $3 2>/dev/nul |sed -Ee 's/[^>]+>(.+)\s+\(0.+/\1/ ;1s/.*/DEP:&/ ;1! s/.*/    &/'
}

l(){
unset a op o E y O N n P u w;r=%p;f=0;d=0
[[ ${@:1} =~ ^\.$ ]] &&{ find ~+ -type f; return; }
[[ ${@:1} =~ ^/$ ]] &&{ find ~+ \! -ipath ~+ -type d -printf $r/\\n ; return; }
for e
{
case ${e:0:3} in
-f) f=1;;
-d) d=1;;
-[0-9]*) y=-maxdepth\ ${e:1};;
-E) E=1;;
-s) r=%s\ $r;;
-t) r="$r %Tr %Tx";;
-st) r='%s %p %Tr %Tx';;
-[HDLPO]|-[ac-il-y]?) op=$op${e/=/ }\ ;;
-|--) a=$a$e\ ;break;;
-*) echo if \'$e\' is meant as filename, the last options must end with - or --;;
*)	break;;
esac
op=$op\ $e
}
D="-type d -printf \"$r/\n\""
F="-type f -printf \"$r\n\""
H="-type d -printf \"$r/\n\""
I="-type f -printf \"$r\n\""
set -f
A=`history 1`
A=${A# *[0-9]*  }' '
A=${A%%[&|>]*}
a=${A#*$op* }
[ $a ] || { eval "find ~+ \! -ipath ~+ $H -o $I"; return; }
eval set -- "${a//\\/\\\\}$n"
IFS=$'\n'

for a
{
[[ $a =~ [*?] ]];w=$?
z=${a: -1}
a=${a%[/.]}
if [ ${a:0:1} = / ];then
	P=$a
	if((w));then
		s=$a;
	else
		p=${a%%[*?]*}
		s=${p%/*}/
	fi
	[ -d $P ] && P=$P/*
else
	s=~+
	if((w));then
		if [ ${a:0:3} = ../ ] ;then
			s=${s%/*}
			P=$s/${a#../}
		elif [ ${a:0:2} = ./ ] ;then
			P=$s/${a#./}
		else
			P=$s/$a
		fi
		[ -d $P ] && P=$P/*
	else
		m=${a%%[*?]*}
		p=${m%/*}
		P=${m##*/}*${a#*[*?]}
		if [ ${a:0:3} = ../ ] ;then
			s=${s%/*}/${p#../}
		elif [ ${a:0:2} = ./ ] ;then
			s=$s/${p./}
		else
			s=$s/$p
		fi
	fi
fi
if [ $z = . ] ;then	D=;H=
elif [ $z = / ] ;then	F=;I=
else	O=-o
fi
if [ $E ] ;then	A="find $s $y -regextype posix-extended -iregex */$a $op \( $H $O $I"
else	A="find $s $y -ipath $P $op \( $D $O $F"
fi
if((f+d));then
	export -f fd;eval $A -exec bash -c \'fd $f $d \$0\' {} '\; \)'
else	eval "$A \)"
fi
}
set +f
}
